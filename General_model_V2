#Main script
import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import function_library as fl
from matplotlib.dates import DateFormatter

def get_r_vector(b_vector, lambda_):
    r_vector = np.zeros(len(b_vector))
    for tau in range(len(b_vector)):
        b1 = b_vector.iloc[tau, 0]
        b2 = b_vector.iloc[tau, 1]
        b3 = b_vector.iloc[tau, 2]
        f1 = 1
        f2 = (1 - np.exp(-lambda_ * tau)) / (lambda_ * tau)
        f3 = (1 - np.exp(-lambda_ * tau)) / (lambda_ * tau) - np.exp(-lambda_ * tau)
        r_vector[tau] = b1 * f1 + b2 * f2 + b3 * f3
    return r_vector

def alm_model(num_months, num_stocks, scenario_bool, scenario):
    #From lab assignment 2a:
    x = 60
    z = 65
    s = 120 - z
    start_col = 2
    end_col = 12
    premium = 120000 / 12
    s_p = np.log(1 + 0.02)

    #Initializing the vectors and matrixes were gonna store values in.
    V = np.zeros((num_months, num_stocks))
    p_1 = np.zeros((num_months, num_stocks))
    p_2 = np.zeros((num_months, num_stocks))
    net_cf = np.zeros(num_months)
    assets_value = np.zeros(num_months)
    second_order_V = np.zeros(num_months)
    portfolio_return = np.zeros(num_months)
    bof = np.zeros(num_months)
    expected_G = np.zeros((num_months-1,1))
    expected_V = np.zeros((num_months-1,1))
    B = np.zeros(num_months)
    makeham_array = np.zeros(num_months)
    b = 166842.647408 #This is from the previous lab, lab 2a)

    scenario_file = pd.read_csv("C:\\Users\\HannesAlm\\Downloads\\ScenarioFile_HS.csv", sep = ',') #Scenario file
    one_scenario_file = pd.read_csv("C:\\Users\\HannesAlm\\Downloads\\OneScenario.csv", sep = ',') #One-scenario file
    first_order_reserve = fl.first_order_reserve(30)
    state_model = fl.state_model()
    #scenario_bool = True #change here to determine which file

    if scenario_bool:
        #scenario = 73 #For the scenario-file, select the scenario you would like here
        current_df = scenario_file[scenario_file["Scenario"] == scenario]
    else:
        current_df = one_scenario_file

    for t in range(0, num_months):
        V[t, :] = current_df.iloc[t, start_col : end_col] #Change here to determine underlying data

    p_2[0, :] = 2200000 / num_stocks
    assets_value[0] = 2200000
    second_order_V[0] = 2200000
    for t in range(1, num_months):
        p_1[t, :] = p_2[t - 1, :] * V[t, :] / V[t - 1, :]
        p_2[t, :] = p_1[t, :] + net_cf[t] * p_1[t, :] / np.sum(p_1[t, :])
        portfolio_return[t] = np.sum(p_1[t, :]) / np.sum(p_2[t - 1, :])
        if t <= 60:
            net_cf[t] = state_model.loc[t, "pp"] * premium - state_model.loc[t, "t_pp_tr"] * max(first_order_reserve[t - 1], second_order_V[t - 1]) + state_model.loc[t, "po"] * b / 12 #Negative cf so reversed signs
            second_order_V[t] = premium - fl.qofx(t, 60) / (1 - fl.qofx(t, 60)) * (-second_order_V[t - 1]) + second_order_V[t - 1] * portfolio_return[t]
        else:
            second_order_V[t] = - fl.qofx(t - 1, 60) / (1 - fl.qofx(t - 1, 60)) * (-second_order_V[t - 1]) + second_order_V[t - 1] * portfolio_return[t - 1]
            current_age = x + t / 12
            cumulative_makeham = 0 #reset denominator to calculate the next monthly payout in the second order reserve
            for tau in range(0, 12 * int((z + s - current_age)) + 1):
                cumulative_makeham += fl.Makeham(current_age + tau / 12) / fl.Makeham(current_age) * np.exp(-s_p * tau / 12)
            makeham_array[t - 1] = cumulative_makeham * 1 / 12
            B[t - 1] = second_order_V[t] / makeham_array[t - 1]
            second_order_V[t] = second_order_V[t] - max(B[t - 1] / 12, b / 12)
            net_cf[t - 1] = state_model.loc[t, "pp"] * premium - state_model.loc[t, "t_pp_tr"] * max(first_order_reserve[t - 1], second_order_V[t - 1]) - state_model.loc[t, "po"] * B[t - 1] / 12

        assets_value[t] = assets_value[t - 1] * portfolio_return[t] + net_cf[t - 1] #Updates total asset value

        #Have to use weird indexing here because we start the loop at 1
        if t == 1:
            expected_G[t - 1, 0] = 2000000
            expected_V[t - 1, 0] = 2200000
        else:  
            expected_G[t - 1, 0] = (state_model.loc[t, "pp"] + state_model.loc[t, "po"]) * first_order_reserve[t]
            expected_V[t - 1, 0] = (state_model.loc[t, "pp"] + state_model.loc[t, "po"]) * second_order_V[t]

    first_cash_flow = np.zeros(720)
    be = np.zeros(num_months)
    first_order_60 = fl.first_order_reserve(60)
    for t in range(720):
        if t == 0:
            first_cash_flow[t] = 0 #Not zero for t = 0 I think, why first BE wrong?
        else:
            first_cash_flow[t] = state_model.loc[t, "po"] * b / 12 + state_model.loc[t, "t_pp_tr"] * first_order_60[t - 1] - state_model.loc[t, "pp"] * premium

    b_df = current_df.iloc[:, 17 : 21]
    r = get_r_vector(b_df, 0.7308)
    tmp_array = np.zeros(num_months)
    for t in range(num_months):
        current_cash_flow = first_cash_flow[t : num_months]
        for i in range(len(current_cash_flow)):
            tmp_array[t] += current_cash_flow[i] * np.exp(-np.log(1 + r[t]) * ((i + 1)/12)) #Discounted Nelson-Siegel
        be[t] = tmp_array[t]

    for t in range(num_months):
        bof[t] = assets_value[t] - be[t]

    delta_bof = np.diff(bof) * -1
    filtered_data = delta_bof[~np.isnan(delta_bof)]
    scr = np.percentile(filtered_data, 99.5)

    result_dict = {"EG" : expected_G,
                   "EV" : expected_V,
                   "BE" : be, 
                   "BOF" : bof,
                   "2 order reserve" : second_order_V,
                   "assets" : assets_value}
    return result_dict

#enter number of months, true if scenariofileHS, false otherwise, and what scenario you want to extract
scenario_dict = alm_model(360, 10, False, 35)

plt.plot(scenario_dict["EG"], label = "expected G")
plt.plot(scenario_dict["EV"], label = "expected V")
plt.plot(scenario_dict["BE"], label = "best estimate")
plt.plot(scenario_dict["2 order reserve"], label = "second order reserve")
plt.plot(scenario_dict["assets"], label = "assets")
#plt.plot(first_order_reserve, label = "G")
#plt.plot(scenario_dict["BOF"], label = "basic own funds")
#plt.plot(net_cf)
#plt.plot(B / 12)
#plt.plot(portfolio_return)
plt.legend()
